name: Helm Deployment (Local)
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Ensure Local Docker Registry Is Running (Windows)
        shell: pwsh
        run: |
          $registryExists = docker ps --format "{{.Names}}" | Select-String "registry"
          if (-not $registryExists) {
            docker run -d -p 5000:5000 --restart=always --name registry registry:2
          }

      - name: Build and Push Local Docker Image
        run: |
          cd WEB
          docker build --no-cache -t coweb-app:latest .
          docker tag coweb-app:latest localhost:5000/coweb-app:latest
          docker push localhost:5000/coweb-app:latest
          cd ..

      - name: Ensure Namespace Exists
        run: |
          kubectl get ns coweb-ns || kubectl create ns coweb-ns

      - name: Set Kubernetes Context to Docker Desktop
        run: |
          kubectl config use-context docker-desktop

      - name: Lint Helm Chart
        run: |
          helm lint ./coweb

      - name: Deploy with Helm (Stable Setup)
        run: |
          # helm upgrade --install coweb ./coweb --namespace coweb-ns --set image.repository=localhost:5000/coweb-app --set image.tag=latest --set image.pullPolicy=Always --wait
          helm upgrade --install coweb ./coweb --namespace coweb-ns `
            --set image.repository="localhost:5000/coweb-app" `
            --set image.tag="latest" `
            --set image.pullPolicy="Always" `
            --wait

      - name: Restart Deployment to Apply Latest Image
        run: |
          kubectl rollout restart deployment/coweb -n coweb-ns

      - name: Verify Deployment
        run: |
          kubectl get all -n coweb-ns
          kubectl get svc -n coweb-ns

      # - name: Wait for service to be Ready and port-forward
      #   run: |
      #     kubectl wait --for=condition=available --timeout=150s deployment/coweb -n coweb-ns
      #     kubectl port-forward svc/coweb-service -n coweb-ns 30010:80 &
      #     echo "Service is now available at http://localhost:30010"

      # - name: Port-forward coweb-service
      #   shell: pwsh
      #   run: |
      #     Start-Process -FilePath "kubectl" `
      #       -ArgumentList "port-forward svc/coweb-service -n coweb-ns 30010:80" `
      #       -WindowStyle Hidden
      #     Start-Sleep -Seconds 5  # Allow port-forward to spin up
      - name: Wait for service to be Ready
        run: |
          kubectl wait --for=condition=available --timeout=150s deployment/coweb -n coweb-ns

      - name: Background port-forwarding
        run: |
         nohup kubectl port-forward svc/coweb-service -n coweb-ns 30012:80 > port-forward.log 2>&1 &
         echo "✅ Service is now available at http://localhost:30012"

      # - name: Verify Port Forwarding
      #   shell: pwsh
      #   run: |
      #    $maxAttempts = 20
      #    $attempt = 0
      #    while ($attempt -lt $maxAttempts) {
      #    try {
      #    $resp = Invoke-WebRequest -Uri "http://localhost:30012" -UseBasicParsing -ErrorAction Stop
      #    if ($resp.StatusCode -eq 200) {
      #     Write-Host "✅ Service is ready!"
      #     break
      #     }
      #    } catch {
      #    Write-Host "Waiting for service... attempt $($attempt + 1)"
      #    Start-Sleep -Seconds 5
      #    $attempt++
      #    }
      #    }
      #    if ($attempt -eq $maxAttempts) {
      #    throw "❌ Service did not become ready in time."
      #    }

      - name: Rollback on Failure
        if: ${{ failure() }}
        run: |
          kubectl rollout undo deployment/coweb -n coweb-ns

      - name: Install ArgoCD in the local k8s cluster
        run: |
          kubectl apply -n argocd -f "https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml"

      - name: Wait for ArgoCD to be Available
        run: |
          kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n argocd

      - name: Port Forward ArgoCD Server (Windows-safe)
        shell: pwsh
        run: |
          Start-Process -NoNewWindow -FilePath "kubectl" -ArgumentList "port-forward svc/argocd-server -n argocd 8080:443"

      - name: Validate ArgoCD CLI Execution
        shell: pwsh
        run: |
          if (!(Test-Path "$env:USERPROFILE\argocd.exe")) {
            Write-Error "ArgoCD CLI not found!"
            exit 1
          }

      