name: Helm Deployment (Local)
on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Ensure Local Docker Registry Is Running (Windows)
        shell: pwsh
        run: |
         $registryExists = docker ps | Select-String "registry"
          if (-not $registryExists) {
          docker run -d -p 5000:5000 --restart=always --name registry registry:2
          }

      - name: Build and Push Local Docker Image
        run: |
          cd WEB
          docker build --no-cache -t coweb-app:latest .
          docker tag coweb-app:latest localhost:5000/coweb-app:latest
          docker push localhost:5000/coweb-app:latest
          cd ..

      - name: Ensure Namespace Exists
        run: |
          kubectl get ns coweb-ns || kubectl create ns coweb-ns

      - name: Set Kubernetes Context to Docker Desktop
        run: |
          kubectl config use-context docker-desktop

      - name: Lint Helm Chart
        run: |
          helm lint ./coweb

      - name: Deploy with Helm (Stable Setup)
        run: |
          helm upgrade --install coweb ./coweb --namespace coweb-ns --set image.repository=localhost:5000/coweb-app --set image.tag=latest --set image.pullPolicy=Always --wait

      - name: Restart Deployment to Apply Latest Image
        run: |
          kubectl rollout restart deployment/coweb -n coweb-ns

      - name: Verify Deployment
        run: |
          kubectl get all -n coweb-ns
          kubectl get svc -n coweb-ns

      # - name: Rollback on Failure (Enhanced)
      #   if: ${{ failure() }}
      #   run: |
      #     kubectl rollout undo deployment/coweb -n coweb-ns
      #     LAST_REVISION=$(helm history coweb --namespace coweb-ns --max 1 | awk '{print $1}' | tail -n 1)
      #     if [ "$LAST_REVISION" != "REVISION" ]; then
      #       helm rollback coweb --namespace coweb-ns
      #     fi
      - name: Rollback on Failure
        if: ${{ failure() }}
        run: |
         set -e
         kubectl rollout undo deployment/coweb -n coweb-ns

      - name: Authenticate with ArgoCD (Local Instance)
        run: |
          argocd login localhost:8080 --username admin --password $ARGOCD_PASSWORD --grpc-web
        env:
           ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}

      # - name: Deploy and Sync Application
      #   run: |
      #     argocd app sync coweb-app --grpc-web || { echo "Sync failed"; exit 1; }
      #     argocd app wait coweb-app --health --timeout 300 || { echo "App is not healthy"; exit 1; }


      - name: Deploy with ArgoCD (Bash)
        shell: bash
        run: |
          set -e
          argocd app sync coweb-app --grpc-web
          argocd app wait coweb-app --health --timeout 300

      - name: Wait for Service and Port Forward
        shell: bash
        run: |
          until kubectl get svc coweb-service -n coweb-ns; do
            echo "Waiting for service..."
            sleep 5
          done
          kubectl port-forward svc/coweb-service 32000:80 -n coweb-ns &